<html>
<head>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.13.3/JSXTransformer.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.24.0/babel.js"></script>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
  <script src = "https://code.jquery.com/jquery-2.1.3.min.js" type = "text/javascript"></script>
  <script src="https://fastcdn.org/Underscore.js/1.8.3/underscore-min.js"></script>
  <script src = "https://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type = "text/javascript"></script>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-bootstrap/0.32.1/react-bootstrap.min.js"></script>
  <link href="https://gitcdn.github.io/bootstrap-toggle/2.2.2/css/bootstrap-toggle.min.css" rel="stylesheet">
<script src="https://gitcdn.github.io/bootstrap-toggle/2.2.2/js/bootstrap-toggle.min.js"></script>
<link href="https://gitcdn.github.io/bootstrap-toggle/2.2.2/css/bootstrap-toggle.min.css" rel="stylesheet">
<script src="https://gitcdn.github.io/bootstrap-toggle/2.2.2/js/bootstrap-toggle.min.js"></script>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-bootstrap/0.32.1/react-bootstrap.min.js"></script>
  <link href="https://gitcdn.github.io/bootstrap-toggle/2.2.2/css/bootstrap-toggle.min.css" rel="stylesheet">
<script src="https://gitcdn.github.io/bootstrap-toggle/2.2.2/js/bootstrap-toggle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/accounting.js/0.4.1/accounting.js"></script>
</head>
  <body>
    <div id='app'></div>
    <script type='text/babel'>
class SavedElements extends React.Component{
  constructor(){
    super()
    this.state = {
      firstRow: {
        position: 'fixed',
        width: '33%',
        height: '100%',
        background: 'orange'
      },
      newDivArray: [],
      buttonStyle: "btn btn-success",
      toggleButtonStyle: this.toggleButtonStyleOn,
      numberOfButtons: 0
    }
  }
  newDivStyle = {
    position: 'relative',
    height: '15%',
    width: '100%',
    background: 'linear-gradient(45deg, rgba(243,226,199,1) 44%,rgba(193,158,103,1) 48%,rgba(182,141,76,1) 51%,rgba(233,212,179,1) 73%)',
    borderRadius: '18% 18% 18% 18%',
    borderWidth: '4px',
    borderStyle: 'outset',
    boxShadow: '1px 4px',
    borderColor: 'silver'
  }
  type_span_style = {
    position: 'relative',
    height: '5%',
    width: '100%',
    background: 'red',
    borderRadius: '25%'
  }
  toggleButtonGroupStyle = {
    position: 'relative',
    width: '100%'
  }
  toggleButtonStyleOff = {
    position: 'relative',
    width: '100%',
    backgroundColor: 'red',
    borderRadius: '100% 100% 0% 0%',
    height: '25%'
  }
  toggleButtonStyleOn= {
    position: 'relative',
    width: '100%',
    backgroundColor: 'green',
    borderRadius: '100% 100% 0% 0%',
    height: '25%'
  }
  numberOfButtons = 0
  turnOnOrOff = (event) =>{
    var buttonId = event.currentTarget.id
    var button = document.getElementById(buttonId)
    var buttonRed = 'position: relative; width: 100%; background-color: red; border-radius: 100% 100% 0% 0%; height: 25%;'
    var buttonGreen = 'position: relative; width: 100%; background-color: green; border-radius: 100% 100% 0% 0%; height: 25%;'
    var buttonRedTrue = button.attributes[1].nodeValue == buttonRed
    var buttonGreenTrue = button.attributes[1].nodeValue == buttonGreen
    var buttonIndex = parseInt(buttonId.slice(6))
    if (buttonRedTrue){
      button.attributes[1].nodeValue = buttonGreen
      this.state.newDivArray[buttonIndex - 1] =
        <div style={this.newDivStyle}>
          <button id={'button'+buttonIndex++} style={this.toggleButtonStyleOn} onClick={this.turnOnOrOff}></button>
        </div>
    }
    if (buttonGreenTrue){
      button.attributes[1].nodeValue = buttonRed
      this.state.newDivArray[buttonIndex - 1] =
        <div style={this.newDivStyle}>
          <button id={'button'+buttonIndex} style={this.toggleButtonStyleOff} onClick={this.turnOnOrOff}></button>
        </div>
    }
  }
  placeDivs = () => {
    this.numberOfButtons++
    this.setState({
      newDivArray: this.state.newDivArray.push(
        <div style={this.newDivStyle}>
          <button id={'button'+this.numberOfButtons} style={this.toggleButtonStyleOn} onClick={this.turnOnOrOff}></button>
        </div>
      )
    })
  }
  // <tr>
  //   <td>
  //       <div id='form_wrapper' className="form-group" style={this.state.optionDivStyle}>
  //           <label id='budget_element_label' for="title">Budget Element</label>
  //           <input type="text" placeholder='Title' style={this.state.inputStyle} className="form-control" id="title"></input>
  //           <input type="text" placeholder='Amount' onFocus={this.unformatMoney}  onBlur={this.formatMoney} style={this.state.inputStyle} className="form-control" id="title"></input>
  //           <p id='date_type_display'></p>
  //           <input className="form-control" type="date" name="bday"></input>
  //           <ButtonToolbar id='dropDownMenu'>
  //             <DropdownButton title="Type" id="dropdown-size-medium">
  //               <MenuItem id='menu_item_income' onMouseEnter={this.dateReceived} eventKey="1">Income</MenuItem>
  //               <MenuItem id='menu_item_expense' onMouseEnter={this.dateOwed} eventKey="2">Expense</MenuItem>
  //               <MenuItem divider />
  //               <MenuItem id='menu_item_other' onClick={this.customTitles} eventKey="3">Other</MenuItem>
  //             </DropdownButton>
  //           </ButtonToolbar>
  //           <button style={this.state.saveButtonStyle} className="btn btn-primary">Save</button>
  //           <button style={this.state.deleteButtonStyle} className="btn btn-danger">Delete</button>
  //       </div>
  //   </td>
  // </tr>
  render(){
    return (
      <div>
      <button onClick={this.placeDivs}>add div</button>
        <table>
          <tbody>
            <tr>
              <td>
                <div style={this.state.firstRow}>
                  {this.state.newDivArray}
                </div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    )
  }
  componentWillMount() {
      console.log('componentWillMount')
   }
   componentDidMount() {
       console.log('componentDidMount')
   }
   componentWillReceiveProps(newProps) {
       console.log('componentWillReceiveProps')
  }
   // shouldComponentUpdate(newProps, newState) {
   //     console.log('shouldComponentUpdate')
   // }
   componentWillUpdate(nextProps, nextState) {
       console.log('componentWillUpdate')
   }
   componentDidUpdate(prevProps, prevState) {
     if (!isNaN(this.state.newDivArray)){
      this.setState({
        newDivArray: prevState.newDivArray
      })
    }
   }
   componentWillUnmount() {
       console.log('componentWillUnmount')
   }
}
ReactDOM.render(<SavedElements />, document.getElementById('app'))
</script>
</body>
</html>
