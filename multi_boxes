<html>
<head>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react-dom.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.13.3/JSXTransformer.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.24.0/babel.js"></script>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
  <script src = "https://code.jquery.com/jquery-2.1.3.min.js" type = "text/javascript"></script>
  <script src="https://fastcdn.org/Underscore.js/1.8.3/underscore-min.js"></script>
  <script src = "https://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type = "text/javascript"></script>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-bootstrap/0.32.1/react-bootstrap.min.js"></script>
  <link href="https://gitcdn.github.io/bootstrap-toggle/2.2.2/css/bootstrap-toggle.min.css" rel="stylesheet">
<script src="https://gitcdn.github.io/bootstrap-toggle/2.2.2/js/bootstrap-toggle.min.js"></script>
<link href="https://gitcdn.github.io/bootstrap-toggle/2.2.2/css/bootstrap-toggle.min.css" rel="stylesheet">
<script src="https://gitcdn.github.io/bootstrap-toggle/2.2.2/js/bootstrap-toggle.min.js"></script>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-bootstrap/0.32.1/react-bootstrap.min.js"></script>
  <link href="https://gitcdn.github.io/bootstrap-toggle/2.2.2/css/bootstrap-toggle.min.css" rel="stylesheet">
<script src="https://gitcdn.github.io/bootstrap-toggle/2.2.2/js/bootstrap-toggle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/accounting.js/0.4.1/accounting.js"></script>
</head>
  <body>
    <div id='app'></div>
    <script type='text/babel'>
      class DuplicateElements extends React.Component{
        constructor(props){
          super(props)
          this.buttonDuplicator = this.buttonDuplicator.bind(this)
          this.elementCounter = this.elementCounter.bind(this)
          this.placeCustomTitles = this.placeCustomTitles.bind(this)
          this.considerType = this.considerType.bind(this)
          this.unformatMoney = this.unformatMoney.bind(this)
          this.formatMoney = this.formatMoney.bind(this)
          this.customTitles = this.customTitles.bind(this)
          this.dateOwed = this.dateOwed.bind(this)
          this.dateReceived = this.dateReceived.bind(this)
          this.checkNames = this.checkNames.bind(this)
          this.multipleElementCheckandRemove = this.multipleElementCheckandRemove.bind(this)
          this.state = {
            numberOfElements: 0,
            optionDivStyle: {
              position: 'relative',
              left: '28%'
            },
            inputStyle: {
              position: 'relative',
              height: '13%',
              width: '101%'
            },
            saveButtonStyle: {
              position: 'relative',
              right: '-104%'
            },
            deleteButtonStyle: {
              position: 'relative',
              right: '-107%'
            }
          }
          this.buttonArray = []
        }
          counter = this.props.counter || 0
          dateType = ''
          elementCounter = () => {
            this.counter++
            this.buttonDuplicator(this.counter)
            this.setState({
              numberOfElements: this.state.numberOfElements++
            })
          }
          formatMoney = (event) => {
            var value = parseInt(event.target.value)
              var formattedNumber = accounting.formatMoney(value);
              event.target.value = formattedNumber
          }
          unformatMoney = (event) => {
              var unFormattedNumber = accounting.unformat(event.target.value);
              event.target.value = unFormattedNumber
              event.target.select()
          }
          considerType = (event) => {
            var a = event
            return a
          }
          dateReceived = () => {
            document.getElementById('budget_element_label').innerHTML = 'Income Element'
            document.getElementById('date_type_display').innerHTML = 'Date Received'
            var dropDownMenu = document.getElementById('dropDownMenu')
            var check = dropDownMenu.childNodes[1]
            if (document.getElementById('budget_element_label').hasChildNodes() || document.getElementById('date_type_display').hasChildNodes() || dropDownMenu.childNodes.length > 1){
              if (document.getElementById('budget_element_label').children[1]){
                document.getElementById('budget_element_label').removeChild(document.getElementById('budget_element_label').children[1])
                document.getElementById('date_type_display').removeChild(document.getElementById('date_type_display').children[1])
              }
              if (dropDownMenu.children.length > 1){
                var saveButton = dropDownMenu.childNodes[1]
                dropDownMenu.removeChild(saveButton)
              }
            }
          }
          dateOwed = () => {
            document.getElementById('budget_element_label').innerHTML = 'Expense Element'
            document.getElementById('date_type_display').innerHTML = 'Due Date'
            var dropDownMenu = document.getElementById('dropDownMenu')
            if (document.getElementById('budget_element_label').hasChildNodes() || document.getElementById('date_type_display').hasChildNodes() || dropDownMenu.childNodes.length > 1){
              if (document.getElementById('budget_element_label').children[1]){
                document.getElementById('budget_element_label').removeChild(document.getElementById('budget_element_label').children[1])
                document.getElementById('date_type_display').removeChild(document.getElementById('date_type_display').children[1])
              }
              if (dropDownMenu.children.length > 1){
                var saveButton = dropDownMenu.childNodes[1]
                dropDownMenu.removeChild(saveButton)
              }
            }
          }
          customTitles = () => {
            var originalLabel = document.getElementById("budget_element_label")
            var elementDescriptionInput = document.createElement("INPUT");
            var dateDescriptionInput = document.createElement("INPUT");
            var date_type_display = document.getElementById('date_type_display')
            var typeDropdown = document.getElementById('dropDownMenu')
            var saveButton = document.createElement('BUTTON')
                elementDescriptionInput.setAttribute('placeholder', 'type custom name here')
                elementDescriptionInput.setAttribute('class', 'form-group')
                elementDescriptionInput.setAttribute('id', 'element_description')
                dateDescriptionInput.setAttribute('placeholder', 'type custom date description here')
                dateDescriptionInput.setAttribute('class', 'form-group')
                dateDescriptionInput.setAttribute('id', 'date_description')
                saveButton.setAttribute('class', 'btn btn-primary')
                saveButton.addEventListener("click", this.placeCustomTitles)
                saveButton.setAttribute('id', 'save_custom_button')
                saveButton.innerHTML = 'save custom'
                originalLabel.appendChild(elementDescriptionInput)
                date_type_display.appendChild(dateDescriptionInput)
                typeDropdown.appendChild(saveButton)
                this.multipleElementCheckandRemove(originalLabel,date_type_display,typeDropdown)
                elementDescriptionInput.focus()
          }
          multipleElementCheckandRemove = (originalLabel, date_type_display,typeDropdown) => {
            if (originalLabel.childElementCount > 1 || typeDropdown.childElementCount > 2){
              for (var childCounter = 1; childCounter < originalLabel.childElementCount; childCounter++){
              var childToRemove = originalLabel.childNodes[childCounter]
                originalLabel.removeChild(childToRemove)
              }
              for (var childCounter = 1; childCounter < date_type_display.childElementCount; childCounter++){
              var childToRemove = date_type_display.childNodes[childCounter]
                date_type_display.removeChild(childToRemove)
              }
              for (var childCounter = 1; childCounter < typeDropdown.childElementCount; childCounter++){
              var childToRemove = typeDropdown.childNodes[childCounter]
                typeDropdown.removeChild(childToRemove)
              }
            }
          }

          placeCustomTitles = () => {
            var dateDescriptionInput = document.getElementById('date_description')
            var elementDescriptionInput = document.getElementById('element_description')
            var typeDropdown = document.getElementById('dropDownMenu')

            if (elementDescriptionInput){

              if (elementDescriptionInput){
              var savedCustomElementTitle = elementDescriptionInput.value
              } else {
                var savedCustomElementTitle = document.getElementById('budget_element_label').innerHTML
              }

              if (dateDescriptionInput){
                var savedCustomDateTitle = dateDescriptionInput.value
              } else {
                var savedCustomDateTitle = document.getElementById('date_type_display').innerHTML
              }

              if (this.checkNames(savedCustomElementTitle) && this.checkNames(savedCustomDateTitle)){
                document.getElementById('budget_element_label').innerHTML = savedCustomElementTitle
                document.getElementById('date_type_display').innerHTML = savedCustomDateTitle
                typeDropdown.removeChild(typeDropdown.childNodes[1])
              } else {
                alert('must enter a title in both boxes or select another option')
              }

            }
          }
          checkNames = (labelToCheck) => {
            if (labelToCheck == ''){
              return false
            } else return true
          }
          buttonDuplicator = (numberOfButtons) => {
            var DropdownButton = ReactBootstrap.DropdownButton
            var ButtonToolbar = ReactBootstrap.ButtonToolbar
            var MenuItem = ReactBootstrap.MenuItem
            // for (let buttonCounter = 0; buttonCounter < numberOfButtons; buttonCounter++){
              this.buttonArray.push(
                <tr>
                  <td>
                      <div id='form_wrapper' className="form-group" style={this.state.optionDivStyle}>
                          <label id='budget_element_label' for="title">Budget Element</label>
                          <input type="text" placeholder='Title' style={this.state.inputStyle} className="form-control" id="title"></input>
                          <input type="text" placeholder='Amount' onFocus={this.unformatMoney}  onBlur={this.formatMoney} style={this.state.inputStyle} className="form-control" id="title"></input>
                          <p id='date_type_display'></p>
                          <input className="form-control" type="date" name="bday"></input>
                          <ButtonToolbar id='dropDownMenu'>
                            <DropdownButton title="Type" id="dropdown-size-medium">
                              <MenuItem id='menu_item_income' onMouseEnter={this.dateReceived} eventKey="1">Income</MenuItem>
                              <MenuItem id='menu_item_expense' onMouseEnter={this.dateOwed} eventKey="2">Expense</MenuItem>
                              <MenuItem divider />
                              <MenuItem id='menu_item_other' onClick={this.customTitles} eventKey="3">Other</MenuItem>
                            </DropdownButton>
                          </ButtonToolbar>
                          <button style={this.state.saveButtonStyle} className="btn btn-primary">Save</button>
                          <button style={this.state.deleteButtonStyle} className="btn btn-danger">Delete</button>
                      </div>
                  </td>
                </tr>
              )
            // }
          }
        render(){
          return(
            <div>
              <button id='duplicateButtons' counter={this.counter} onClick={this.elementCounter}>new button</button>
              <table>
                <tbody>
                  {this.buttonArray}
                </tbody>
              </table>
            </div>
          )
        }
        componentWillMount() {
            console.log('componentWillMount')
         }
         componentDidMount() {
             console.log('componentDidMount')
         }
         componentWillReceiveProps(newProps) {
             console.log('componentWillReceiveProps')
        }
         // shouldComponentUpdate(newProps, newState) {
         //     console.log('shouldComponentUpdate')
         // }
         componentWillUpdate(nextProps, nextState) {
             console.log('componentWillUpdate')
         }
         componentDidUpdate(prevProps, prevState) {
            this.buttonArray = []
         }
         componentWillUnmount() {
             console.log('componentWillUnmount')
         }
      }
      ReactDOM.render(<DuplicateElements />, document.getElementById('app'))
    </script>
  </body>
  </html>
